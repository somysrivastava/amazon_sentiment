# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RBoP9onBDCIUtw0H4hrEJ-GuMCHyKSyZ
"""


"""amazon web review scrapper"""

import requests
import pandas as pd
from bs4 import BeautifulSoup
from datetime import datetime
import random
import numpy as np
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import matplotlib.pyplot as plt
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

headers = {
    'authority': 'www.amazon.in',
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'accept-language': 'en-US,en;q=0.9,bn;q=0.8',
    'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="102", "Google Chrome";v="102"',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36'
}

reviews_url = input("enter review page url: ")
# reviews_url="https://www.amazon.in/Spigen-Hybrid-Compatible-iPhone-Carbonate/product-reviews/B096YQ6P6Z/ref=cm_cr_dp_d_show_all_btm?ie=UTF8&reviewerType=all_reviews"
len_page = 10

def reviewsHtml(url, len_page):
    soups = []
    for page_no in range(1, len_page + 1):
        params = {
            'ie': 'UTF8',
            'reviewerType': 'all_reviews',
            'filterByStar': 'critical',
            'pageNumber': page_no,
        }
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.text, 'lxml')
        soups.append(soup)
    return soups

def getReviews(html_data):
    data_dicts = []
    boxes = html_data.select('div[data-hook="review"]')
    for box in boxes:
        try:
            name = box.select_one('[class="a-profile-name"]').text.strip()
        except Exception as e:
            name = 'N/A'
        try:
            stars = box.select_one('[data-hook="review-star-rating"]').text.strip().split(' out')[0]
        except Exception as e:
            stars = 'N/A'
        try:
            title = box.select_one('[data-hook="review-title"]').text.strip()
        except Exception as e:
            title = 'N/A'
        try:
            datetime_str = box.select_one('[data-hook="review-date"]').text.strip().split(' on ')[-1]
            date = datetime.strptime(datetime_str, '%B %d, %Y').strftime("%d/%m/%Y")
        except Exception as e:
            date = 'N/A'
        try:
            description = box.select_one('[data-hook="review-body"]').text.strip()
        except Exception as e:
            description = 'N/A'
        data_dict = {
            'Name' : name,
            'Stars' : stars,
            'Title' : title,
            'Date' : date,
            'Description' : description
        }
        data_dicts.append(data_dict)
    return data_dicts

html_datas = reviewsHtml(reviews_url, len_page)

reviews = []

for html_data in html_datas:
    review = getReviews(html_data)
    reviews += review
df = pd.DataFrame(reviews)
#print(df)

df.to_csv('reviews.csv', index=False)

df.head()

reviews = df[['Name', 'Description']].copy()

analyzer = SentimentIntensityAnalyzer()

def classify_sentiment(text):
    sentiment_score = analyzer.polarity_scores(text)['compound']
    if sentiment_score >= 0.05:
        return 'Positive'
    elif sentiment_score <= -0.05:
        return 'Negative'
    else:
        return 'Neutral'

reviews['sentiment'] = reviews['Description'].apply(classify_sentiment)
sentiment_counts = reviews['sentiment'].value_counts()

total_reviews = sentiment_counts.sum()
proportion_positive = sentiment_counts['Positive'] / total_reviews
proportion_negative = sentiment_counts['Negative'] / total_reviews

good_threshold = 0.6
bad_threshold = 0.4

if proportion_positive >= good_threshold:
    product_sentiment = 'A Good product'
elif proportion_negative >= bad_threshold:
    product_sentiment = 'Bad Product think of avoiding'
else:
    product_sentiment = 'Average'

plt.bar(sentiment_counts.index, sentiment_counts.values, color=['green', 'red', 'blue'], label='Sentiment')
plt.axhline(y=total_reviews * good_threshold, color='g', linestyle='--', label='Good Threshold')
plt.axhline(y=total_reviews * bad_threshold, color='r', linestyle='--', label='Bad Threshold')
plt.xlabel('Sentiment')
plt.ylabel('Number of Reviews')
plt.title('Sentiment Distribution of Amazon Reviews')
plt.xticks(rotation=45)
plt.legend()
plt.show()

print(f"Product Sentiment: {product_sentiment}")

